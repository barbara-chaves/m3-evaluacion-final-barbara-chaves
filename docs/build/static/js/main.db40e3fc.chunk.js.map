{"version":3,"sources":["images/Rick_and_Morty.png","data/getDataFromServer.js","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","getDataFromServer","fetch","then","response","json","data","results","map","character","id","name","species","origin","image","status","episode","episodes","length","Filters","props","className","htmlFor","type","value","onChange","onchange","CharacterCard","names","split","to","src","alt","CharacterList","children","characterList","filter","char","toLowerCase","includes","key","CharacterDetails","icon","faArrowLeft","faSmile","title","faDizzy","faQuestionCircle","faRedditAlien","faUserAlt","App","componentDidMount","setState","handleChange","event","target","state","bind","logo","exact","path","render","clickedChar","routName","match","params","CharacterDetail","React","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db40e3fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rick_and_Morty.75509f2e.png\";","const getDataFromServer = () => {\n  return fetch('https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json')\n    .then(response => response.json())\n    .then(data => data.results.map(character => {\n      const {id, name, species, origin, image, status, episode} = character;\n      return {\n        id: id,\n        name: name,\n        species: species,\n        origin: origin.name,\n        image: image,\n        status: status,\n        episodes: episode.length\n      }\n    }))\n}\n\nexport default getDataFromServer","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nconst Filters = props => {\n  return (\n    <div className=\"filter\">\n      <label htmlFor=\"filter__name\">Filtre por nombre</label>\n      <input type=\"text\" id=\"filter__name\" value={props.value} onChange={props.onchange}/>\n    </div>\n  );\n};\n\nFilters.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n}\n\nexport default Filters;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport '../stylesheets/charactersCard.scss'\nimport PropTypes from 'prop-types';\n\nconst CharacterCard = props => {\n  const { image, name, species } = props;\n  const names = name.split(' ');\n  return (\n    <li className=\"character\">\n      <Link to={`/details/${names[0]}_${names[1]}`}>\n        <div className=\"character__image\">\n          <img src={image} alt={name} />\n          <h2 className=\"character__name\">{name}</h2>\n          <p className=\"character__species\">{species}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nCharacterCard.propTypes = {\n  name: PropTypes.string,\n  image: PropTypes.string,\n  species: PropTypes.string\n}\n\nexport default CharacterCard;\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport '../stylesheets/characters-list.scss'\nimport CharacterCard from './CharacterCard'\n \nconst CharacterList = props => {\n  const createCharacterCardList = list => {\n    return list\n    .filter(char => char.name.toLowerCase().includes(props.filter.toLowerCase()))\n    .map(char => {\n      return (\n        <CharacterCard key={char.id} name={char.name} image={char.image} species={char.species}/>\n      )\n    })\n  }\n  return (\n    <main className='characters'>\n      {props.children}\n      <ul className='characters__list'>\n        {createCharacterCardList(props.characterList)}\n      </ul>\n    </main>\n  )\n}\n\nCharacterList.propTypes = {\n  characterList: PropTypes.array,\n  filter: PropTypes.string,\n  children: PropTypes.object\n}\n\nexport default CharacterList","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faDizzy,\n  faSmile,\n  faQuestionCircle\n} from \"@fortawesome/free-regular-svg-icons\";\nimport { faRedditAlien } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUserAlt, faArrowLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport \"../stylesheets/character-details.scss\";\n\nconst CharacterDetails = props => {\n  const { name, species, origin, image, status, episodes } = props.char;\n  const changeStatus = () => {\n    if (status === \"Alive\") {\n      return <FontAwesomeIcon icon={faSmile} title=\"Alive\" />;\n    } else if (status === \"Dead\") {\n      return <FontAwesomeIcon icon={faDizzy} title=\"Dead\" />;\n    }\n    return <FontAwesomeIcon icon={faQuestionCircle} title=\"Unknown\" />;\n  };\n\n  const changeSpecie = () => {\n    if (species === \"Alien\") {\n      return <FontAwesomeIcon icon={faRedditAlien} title=\"Alien\" />;\n    } else if (species === \"Human\") {\n      return <FontAwesomeIcon icon={faUserAlt} title=\"Human\" />;\n    }\n    return <FontAwesomeIcon icon={faQuestionCircle} title=\"Unknown\" />;\n  };\n\n  return (\n    <div className=\"details\">\n      <Link to=\"/\">\n        <button className=\"details__button\">\n          <FontAwesomeIcon icon={faArrowLeft} />\n          Volver\n        </button>\n      </Link>\n      <div className=\"details__card\">\n        <div className=\"details__image\">\n          <img src={image} alt={name} />\n        </div>\n        <div className=\"details__description\">\n          <h2 className=\"details__name\">{name}</h2>\n          <p className=\"details__status\">\n            <span className=\"details__names\">Status: </span>\n            {changeStatus()}\n          </p>\n          <p className=\"details__species\">\n            <span className=\"details__names\">Species: </span>\n            {changeSpecie()}\n          </p>\n          <p className=\"details__origin\">\n            <span className=\"details__names\">Origin: </span>\n            {origin}\n          </p>\n          <p className=\"details__episodes\">\n            <span className=\"details__names\">Episodes: </span>\n            {episodes}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nCharacterDetails.propTypes = {\n  char: PropTypes.object\n};\n\nexport default CharacterDetails;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"../stylesheets/app.scss\";\nimport logo from \"../images/Rick_and_Morty.png\";\nimport getDataFromServer from \"../data/getDataFromServer\";\nimport Filters from \"./Filters\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      characterList: [],\n      filter: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount = () => {\n    getDataFromServer().then(characterList => this.setState({ characterList }));\n  };\n  handleChange = event => {\n    const value = event.target.value;\n    this.setState({ filter: value });\n  };\n\n\n\n  render() {\n    const renderCharacterList = () => {\n      return (\n        <CharacterList characterList={this.state.characterList}\n           filter={this.state.filter}>\n          <Filters value={this.state.filter} onchange={this.handleChange} />\n        </CharacterList>\n        \n      );\n    };\n\n    const renderCharacterDetails = props => {\n      let clickedChar = {};\n      const routName = props.match.params.name;\n      for (const char of this.state.characterList){\n        let names = char.name.split(' ');\n        names = `${names[0]}_${names[1]}`\n        if (names === routName){\n          clickedChar = char\n        }\n      }\n      return(\n        <CharacterDetail char={clickedChar}/>\n      )\n    };\n\n    return (\n      <div className=\"app\">\n        <header className=\"header\">\n          <div className=\"header__image\">\n            <img src={logo} alt=\"Rick and Morty lista de personajes\" />\n          </div>\n        </header>\n       \n        <Switch>\n          <Route exact path=\"/\" render={renderCharacterList} />\n          <Route path=\"/details/:name\" render={renderCharacterDetails} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}